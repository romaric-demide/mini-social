// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  username String  @unique
  name     String?
  email    String  @unique
  image    String?
  bio      String?

  followers Follow[] @relation("Following")
  following Follow[] @relation("Follower")
  blockers  Block[]  @relation("Blocked")
  blocked   Block[]  @relation("Blocker")
  posts     Post[]
  likes     Like[]
  saves     Save[]
  hides     Hide[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  follower   User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  createdAt DateTime @default(now())

  @@id([followerId, followingId])
}

model Block {
  blocker   User   @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String

  blocked   User   @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  createdAt DateTime @default(now())

  @@id([blockerId, blockedId])
}

model Post {
  id     String   @id @default(cuid())
  text   String
  images String[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  parent   Post?   @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?

  replies Post[] @relation("PostReplies")
  likes   Like[]
  saves   Save[]
  hides   Hide[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model Save {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model Hide {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())

  @@id([userId, postId])
}
